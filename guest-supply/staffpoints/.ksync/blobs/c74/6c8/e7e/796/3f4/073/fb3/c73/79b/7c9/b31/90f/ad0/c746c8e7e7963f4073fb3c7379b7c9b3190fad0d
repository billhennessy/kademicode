controllerMappings
        .adminController()
        .path("/staffPointsApp/")
        .enabled(true)
        .defaultView(views.templateView("staffPoints-app/staffPointSettings.html"))
        .addMethod("POST", "handleStaffPoints")
        .build();
        
controllerMappings
        .websiteController()
        .path("/staffPoints/")
        .enabled(true)
        .defaultView(views.templateView("staffPoints-app/staffPointsComponent.html"))
        .build();    
        
        

/* Order Header Transform */
var orderHeaderAmount = controllerMappings.newTableActionHandlerBuilder()
    .id('orderHeaderAmount')
    .title('Order Header Import Actions')
    .description('Determine amount for order header records')
    .processRowFn('doProcessRow')
    .transformRowFn('doTransformRow');
//orderHeaderAmount.field("amount", "Calc Amount?", true);

orderHeaderAmount.build();        

/**
 * 
 * @param {+} row 
 * @param {*} params 
 * @param {*} rowContext 
 * @param {*} importContext 
 * @returns 
 * Column mappings
 * 0	Business Unit
1	Invoice No
2	Account No
3	Sales ID
4	Invoice Date
5	 Sales 
6	 Salesman GP$ 
7	 Actual GP$ 
8	Back Order
9	Drop Shipment
10	 Discount 
11	 Freight 
12	 Misc 
13	 Rebate 
14	 Restock 
15	 Restock 
16	Ship To
17	Invoice Type
18	Invoice Group
 */

function doTransformRow(row, params, rowContext, importContext){
   // var orgIdPrefix = params.orgIdPrefix;
   var fieldMappings = rowContext.fieldMappings;
   var sales = formatter.toDouble(row[5]); //.replace(/\D/g,""));
   var freight = formatter.toDouble(row[11]); //.replace(/\D/g,""));
   //var salesTeam = formatter.toString(row[16]);
   log.info("Sales {}, Freight {}", sales, freight);
    var amount = formatter.toDouble(sales);
    if ( freight >= 0.00) {
        amount = formatter.toDouble( amount - freight);
        row.set(5, formatter.toDouble(amount));
    }
   // row.set(19, salesTeam);
    
    return row;
}

function doProcessRow(row, params, rowContext, importContext){
    var fieldMappings = rowContext.fieldMappings;
    if (fieldMappings && formatter.isNotEmpty(fieldMappings)) {
        var typeMap = formatter.newArrayList();
        typeMap.add(5); //The index of amount
        //typeMap.add(19); 
        fieldMappings.put('amount', typeMap);
        //fieldMappings.put('salesTeam', typeMap);
    }
}



/**
 * Order Detail Table Uploader
 * Looks up Ship To ID from order header
 */
var orderDetailShipTo = controllerMappings.newTableActionHandlerBuilder()
    .id('orderDetailShipTo')
    .title('Order Detail Import Actions')
    .description('Looks up order header values for order detail records')
    .transformRowFn('doTransformRow')
    .processRowFn('doProcessRow');
orderDetailShipTo.build();        

/**
 * 
 * @param {+} row 
 * @param {*} params 
 * @param {*} rowContext 
 * @param {*} importContext 
 * @returns 
 * Column mappings
 0	Business Unit
1	Invoice No
2	Account No
3	Product ID
4	 Qty Order 
5	 Qty Sold 
6	 Price 
7	 Sales 
8	 Salesman GP$ 
9	 Actual GP$ 
10	BackOrder
11	DropShip
12	 Discount 
13	 Misc 
14	 Rebate 
15	 Restock 
16	Order No
17	Order Line
18	 Surcharge  
 */

// function doTransformRow(row, params, rowContext, importContext){
//    // var orgIdPrefix = params.orgIdPrefix;
//    var fieldMappings = rowContext.fieldMappings;
//    var sales = isNaN(row[5]) ? 0.00 : formatter.toDecimal(row[5], 2);

//     row.set(5, formatter.toDecimal(sales,2));
//     row.set()
    
//     return row;
// }

// function doProcessRow(row, params, rowContext, importContext){
//     var fieldMappings = rowContext.fieldMappings;
//     if (fieldMappings && formatter.isNotEmpty(fieldMappings)) {
//         var typeMap = formatter.newArrayList();
//         typeMap.add(19); //The index of the org type in row data
//         fieldMappings.put('amount', typeMap);
//     }
// }

/**
 * Find order header record by orderNumber
 */
 function getOrderRecord(dataSeries, orderNumber) {
    var fieldOrdinal = dataSeries.findFieldOrdinal('orderNumber');
  
    var crit = services.criteriaBuilders.get('salesDataRecord')
        .eq('series', dataSeries)
        .eq('field' + fieldOrdinal, orderNumber);
  
    var results = crit.execute(1);
    
    if (formatter.isNotEmpty(results)) {
        for (var i = 0; i < results.size(); i++) {
            var record = results.get(i);
             log.info("getOrderRecord: orderNumber={} records={} Found={}", orderNumber, results, record);
            return record
  
        }
    }
  
    return null;
  }
  
  /**
 * Find order detail record by orderNumber and orderLine
 */
 function findDetailRecord(dataSeries, orderNumber, orderLine) {
    var fieldOrdinal1 = dataSeries.findFieldOrdinal('orderNumber');
    var fieldOrdinal2 = dataSeries.findFieldOrdinal('orderline');
  
    var crit = services.criteriaBuilders.get('salesDataRecord')
        .eq('series', dataSeries)
        .eq('field' + fieldOrdinal1, orderNumber)
        .eq('field' + fieldOrdinal2, orderLine);
  
    var results = crit.execute(100);
  
    if (formatter.isNotEmpty(results)) {
        for (var i = 0; i < results.size(); i++) {
            var record = results.get(i);
  
            if (record.salesBy.entityName === attributedTo) {
                log.info("findDetailRecord: orderNumber={} records={} Found={}", orderNumber, results, record);
                return record
            }
        }
    }
  
    return null;
  }

/**
 * Property uploader
 * Columns
 * 0	Account No
 * 1	Status
2	Cust Type
3	Cust Level
4	Customer Name
5	Street Address 1
6	City
7	State
8	Postal
9	Country
10	Sales ID
11	Default BU
12	Brand ID
13	Group ID
14	Exclusive ID
15	Freight Term Code
16	Sold To Flag
17	Bill To Flag
18	Ship To Flag
19	 Rooms 
 */

var propertyUploaderAction = controllerMappings.newTableActionHandlerBuilder()
    .id('propertyUploader')
    .title('Property Import Actions')
    .description('Imports and updates properties')
    .validateRowFn('doValidatePropertyRow')
    .transformRowFn('doTransformPropertyRow')
    .processRowFn('doProcessPropertyRow');
    
    propertyUploaderAction.field("defaultOrgType", "Default Org Type", true).optionsFn(function () {
        var list = formatter.newArrayList();
        formatter.foreach(services.organisationManager.allOrgTypes, function(orgType){
            list.add(orgType.name);
        });
        
        return list;
    });
    propertyUploaderAction.build();  

    function doValidatePropertyRow(row, params, rowContext, importContext){
        if(row[1]==="I"){
            return;
        }
    }

    function doTransformPropertyRow(row, params, rowContext, importContext){
      
        var defaultOrgType = params.defaultOrgType;
        if ( formatter.isNotEmpty(defaultOrgType) ) {
            row.add(defaultOrgType); //Add the org type to the end of row data (Index = 3)
        }

        
        return row;
    }
    
    function doProcessPropertyRow(row, params, rowContext, importContext){
        var fieldMappings = rowContext.fieldMappings;
    
        if (fieldMappings && formatter.isNotEmpty(fieldMappings)) {
            var typeMap = formatter.newArrayList();
            typeMap.add(20); //The index of the org type in row data
            fieldMappings.put('orgTypeName', typeMap);
        }
    }
    

/**
 * Guest Supply Metrics
 *  */    

// controllerMappings.newMetricTypeBuilder()
//         .id("online-orders-count")
//         .title("Returns percentage of online orders")
//         .description("Custom for Guest Supplyp")
//         .fields(null)   // leave null for now, we'll add fields later
//         .applicableEntities(null)  // leave null for now, means that any type of entity (profile or org) can be used
//         .calcFn("calcOnlineOrders") // this is the name of a function you will create below to calculate the value
//         .build();     // build the MetricType instance and register it with the app
        
// function calcOnlineOrders(entity, ruleParams, startDate, endDate) {
//     log.info("calcOnlineOrders");
//     var dm = services.dataSeriesManager;
//     var ds = dm.dataSeries()
//     var count = dm.(um.group('pre-associates'))
//     return pre;    // just a constant value for now, we will make this dynamic later
// }



